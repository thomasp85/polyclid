// Generated by cpp11: do not edit by hand
// clang-format off

#include "polyclid_types.h"
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// poly_common.cpp
cpp11::writable::strings poly_primitive_type(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_primitive_type(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_primitive_type(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
int poly_length(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_length(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_length(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::strings poly_definition_names(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_definition_names(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_definition_names(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
SEXP poly_definition(poly_vector_base_p geometries, int which, cpp11::integers element);
extern "C" SEXP _polyclid_poly_definition(SEXP geometries, SEXP which, SEXP element) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_definition(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<int>>(which), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(element)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_set_definition(poly_vector_base_p geometries, int which, cpp11::integers element, SEXP value);
extern "C" SEXP _polyclid_poly_set_definition(SEXP geometries, SEXP which, SEXP element, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_set_definition(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<int>>(which), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(element), cpp11::as_cpp<cpp11::decay_t<SEXP>>(value)));
  END_CPP11
}
// poly_common.cpp
SEXP poly_vertex(poly_vector_base_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_poly_vertex(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_vertex(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_set_vertex(poly_vector_base_p geometries, cpp11::integers which, SEXP value);
extern "C" SEXP _polyclid_poly_set_vertex(SEXP geometries, SEXP which, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_set_vertex(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which), cpp11::as_cpp<cpp11::decay_t<SEXP>>(value)));
  END_CPP11
}
// poly_common.cpp
SEXP poly_edges(poly_vector_base_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_poly_edges(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_edges(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::integers poly_cardinality(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_cardinality(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_cardinality(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::integers poly_n_edges(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_n_edges(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_n_edges(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_subset(poly_vector_base_p geometries, cpp11::integers index);
extern "C" SEXP _polyclid_poly_subset(SEXP geometries, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_subset(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_copy(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_copy(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_copy(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_assign(poly_vector_base_p geometries, cpp11::integers index, poly_vector_base_p value);
extern "C" SEXP _polyclid_poly_assign(SEXP geometries, SEXP index, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_assign(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index), cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(value)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_combine(poly_vector_base_p geometries, cpp11::list_of< poly_vector_base_p > extra);
extern "C" SEXP _polyclid_poly_combine(SEXP geometries, SEXP extra) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_combine(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of< poly_vector_base_p >>>(extra)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_unique(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_unique(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_unique(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::logicals poly_duplicated(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_duplicated(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_duplicated(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::integers poly_any_duplicated(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_any_duplicated(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_any_duplicated(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::logicals poly_is_na(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_is_na(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_is_na(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
bool poly_any_na(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_any_na(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_any_na(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::doubles_matrix<> poly_to_matrix(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_to_matrix(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_to_matrix(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::strings poly_format(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_format(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_format(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::logicals poly_is_equal(poly_vector_base_p geometries1, poly_vector_base_p geometries2);
extern "C" SEXP _polyclid_poly_is_equal(SEXP geometries1, SEXP geometries2) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_is_equal(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries1), cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries2)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_transform(poly_vector_base_p geometries, SEXP affine);
extern "C" SEXP _polyclid_poly_transform(SEXP geometries, SEXP affine) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_transform(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(affine)));
  END_CPP11
}
// poly_common.cpp
SEXP poly_bbox(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_bbox(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_bbox(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_measures.cpp
cpp11::writable::doubles poly_approx_length(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_approx_length(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_approx_length(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_measures.cpp
cpp11::writable::doubles poly_approx_area(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_approx_area(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_approx_area(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_modifications.cpp
poly_vector_base_p poly_reverse_orientation(poly_vector_base_p poly);
extern "C" SEXP _polyclid_poly_reverse_orientation(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_reverse_orientation(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(poly)));
  END_CPP11
}
// poly_modifications.cpp
poly_vector_base_p polygon_make_valid(polygon_p poly);
extern "C" SEXP _polyclid_polygon_make_valid(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_make_valid(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_modifications.cpp
poly_vector_base_p polygon_connect_holes(polygon_p poly);
extern "C" SEXP _polyclid_polygon_connect_holes(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_connect_holes(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_is_degenerate(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_is_degenerate(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_is_degenerate(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_inside(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_inside(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_inside(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_on(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_on(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_on(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_outside(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_outside(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_outside(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_on_positive(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_on_positive(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_on_positive(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_on_negative(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_on_negative(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_on_negative(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_valid(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_valid(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_valid(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_clockwise(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_clockwise(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_clockwise(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_counterclockwise(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_counterclockwise(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_counterclockwise(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_convex(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_convex(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_convex(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_simple(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_simple(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_simple(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_relatively_simple(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_relatively_simple(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_relatively_simple(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_collinear(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_collinear(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_collinear(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_x_monotone(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_x_monotone(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_x_monotone(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_y_monotone(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_y_monotone(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_y_monotone(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_x_weakly_monotone(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_x_weakly_monotone(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_x_weakly_monotone(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_y_weakly_monotone(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_y_weakly_monotone(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_y_weakly_monotone(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_selfintersecting(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_selfintersecting(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_selfintersecting(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_empty();
extern "C" SEXP _polyclid_create_polygon_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_empty());
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_single(SEXP p);
extern "C" SEXP _polyclid_create_polygon_single(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_single(cpp11::as_cpp<cpp11::decay_t<SEXP>>(p)));
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_list(cpp11::list ps);
extern "C" SEXP _polyclid_create_polygon_list(SEXP ps) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(ps)));
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_list_list(cpp11::list pss);
extern "C" SEXP _polyclid_create_polygon_list_list(SEXP pss) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_list_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(pss)));
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_triangle(SEXP triangles);
extern "C" SEXP _polyclid_create_polygon_triangle(SEXP triangles) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_triangle(cpp11::as_cpp<cpp11::decay_t<SEXP>>(triangles)));
  END_CPP11
}
// polygon.cpp
cpp11::writable::integers polygon_sub_cardinality(polygon_p geometries);
extern "C" SEXP _polyclid_polygon_sub_cardinality(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_sub_cardinality(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries)));
  END_CPP11
}
// polygon.cpp
cpp11::writable::integers polygon_n_holes(polygon_p geometries);
extern "C" SEXP _polyclid_polygon_n_holes(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_n_holes(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_get_boundary(polygon_p geometries);
extern "C" SEXP _polyclid_polygon_get_boundary(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_get_boundary(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_set_boundary(polygon_p geometries, polygon_p other);
extern "C" SEXP _polyclid_polygon_set_boundary(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_set_boundary(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_p>>(other)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_get_hole(polygon_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_polygon_get_hole(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_get_hole(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_remove_hole(polygon_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_polygon_remove_hole(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_remove_hole(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_add_hole(polygon_p geometries, polygon_p other);
extern "C" SEXP _polyclid_polygon_add_hole(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_add_hole(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_p>>(other)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_set_hole(polygon_p geometries, cpp11::integers which, polygon_p other);
extern "C" SEXP _polyclid_polygon_set_hole(SEXP geometries, SEXP which, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_set_hole(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which), cpp11::as_cpp<cpp11::decay_t<polygon_p>>(other)));
  END_CPP11
}
// polyline.cpp
polyline_p create_polyline_empty();
extern "C" SEXP _polyclid_create_polyline_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polyline_empty());
  END_CPP11
}
// polyline.cpp
polyline_p create_polyline_single(SEXP p);
extern "C" SEXP _polyclid_create_polyline_single(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polyline_single(cpp11::as_cpp<cpp11::decay_t<SEXP>>(p)));
  END_CPP11
}
// polyline.cpp
polyline_p create_polyline_list(cpp11::list ps);
extern "C" SEXP _polyclid_create_polyline_list(SEXP ps) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polyline_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(ps)));
  END_CPP11
}
// polyline.cpp
polyline_p create_polyline_segment(SEXP segments);
extern "C" SEXP _polyclid_create_polyline_segment(SEXP segments) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polyline_segment(cpp11::as_cpp<cpp11::decay_t<SEXP>>(segments)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_polyclid_create_polygon_empty",          (DL_FUNC) &_polyclid_create_polygon_empty,          0},
    {"_polyclid_create_polygon_list",           (DL_FUNC) &_polyclid_create_polygon_list,           1},
    {"_polyclid_create_polygon_list_list",      (DL_FUNC) &_polyclid_create_polygon_list_list,      1},
    {"_polyclid_create_polygon_single",         (DL_FUNC) &_polyclid_create_polygon_single,         1},
    {"_polyclid_create_polygon_triangle",       (DL_FUNC) &_polyclid_create_polygon_triangle,       1},
    {"_polyclid_create_polyline_empty",         (DL_FUNC) &_polyclid_create_polyline_empty,         0},
    {"_polyclid_create_polyline_list",          (DL_FUNC) &_polyclid_create_polyline_list,          1},
    {"_polyclid_create_polyline_segment",       (DL_FUNC) &_polyclid_create_polyline_segment,       1},
    {"_polyclid_create_polyline_single",        (DL_FUNC) &_polyclid_create_polyline_single,        1},
    {"_polyclid_poly_any_duplicated",           (DL_FUNC) &_polyclid_poly_any_duplicated,           1},
    {"_polyclid_poly_any_na",                   (DL_FUNC) &_polyclid_poly_any_na,                   1},
    {"_polyclid_poly_approx_area",              (DL_FUNC) &_polyclid_poly_approx_area,              1},
    {"_polyclid_poly_approx_length",            (DL_FUNC) &_polyclid_poly_approx_length,            1},
    {"_polyclid_poly_assign",                   (DL_FUNC) &_polyclid_poly_assign,                   3},
    {"_polyclid_poly_bbox",                     (DL_FUNC) &_polyclid_poly_bbox,                     1},
    {"_polyclid_poly_cardinality",              (DL_FUNC) &_polyclid_poly_cardinality,              1},
    {"_polyclid_poly_combine",                  (DL_FUNC) &_polyclid_poly_combine,                  2},
    {"_polyclid_poly_copy",                     (DL_FUNC) &_polyclid_poly_copy,                     1},
    {"_polyclid_poly_definition",               (DL_FUNC) &_polyclid_poly_definition,               3},
    {"_polyclid_poly_definition_names",         (DL_FUNC) &_polyclid_poly_definition_names,         1},
    {"_polyclid_poly_duplicated",               (DL_FUNC) &_polyclid_poly_duplicated,               1},
    {"_polyclid_poly_edges",                    (DL_FUNC) &_polyclid_poly_edges,                    2},
    {"_polyclid_poly_format",                   (DL_FUNC) &_polyclid_poly_format,                   1},
    {"_polyclid_poly_has_point_inside",         (DL_FUNC) &_polyclid_poly_has_point_inside,         2},
    {"_polyclid_poly_has_point_on",             (DL_FUNC) &_polyclid_poly_has_point_on,             2},
    {"_polyclid_poly_has_point_on_negative",    (DL_FUNC) &_polyclid_poly_has_point_on_negative,    2},
    {"_polyclid_poly_has_point_on_positive",    (DL_FUNC) &_polyclid_poly_has_point_on_positive,    2},
    {"_polyclid_poly_has_point_outside",        (DL_FUNC) &_polyclid_poly_has_point_outside,        2},
    {"_polyclid_poly_is_degenerate",            (DL_FUNC) &_polyclid_poly_is_degenerate,            1},
    {"_polyclid_poly_is_equal",                 (DL_FUNC) &_polyclid_poly_is_equal,                 2},
    {"_polyclid_poly_is_na",                    (DL_FUNC) &_polyclid_poly_is_na,                    1},
    {"_polyclid_poly_length",                   (DL_FUNC) &_polyclid_poly_length,                   1},
    {"_polyclid_poly_n_edges",                  (DL_FUNC) &_polyclid_poly_n_edges,                  1},
    {"_polyclid_poly_primitive_type",           (DL_FUNC) &_polyclid_poly_primitive_type,           1},
    {"_polyclid_poly_reverse_orientation",      (DL_FUNC) &_polyclid_poly_reverse_orientation,      1},
    {"_polyclid_poly_set_definition",           (DL_FUNC) &_polyclid_poly_set_definition,           4},
    {"_polyclid_poly_set_vertex",               (DL_FUNC) &_polyclid_poly_set_vertex,               3},
    {"_polyclid_poly_subset",                   (DL_FUNC) &_polyclid_poly_subset,                   2},
    {"_polyclid_poly_to_matrix",                (DL_FUNC) &_polyclid_poly_to_matrix,                1},
    {"_polyclid_poly_transform",                (DL_FUNC) &_polyclid_poly_transform,                2},
    {"_polyclid_poly_unique",                   (DL_FUNC) &_polyclid_poly_unique,                   1},
    {"_polyclid_poly_vertex",                   (DL_FUNC) &_polyclid_poly_vertex,                   2},
    {"_polyclid_polygon_add_hole",              (DL_FUNC) &_polyclid_polygon_add_hole,              2},
    {"_polyclid_polygon_connect_holes",         (DL_FUNC) &_polyclid_polygon_connect_holes,         1},
    {"_polyclid_polygon_get_boundary",          (DL_FUNC) &_polyclid_polygon_get_boundary,          1},
    {"_polyclid_polygon_get_hole",              (DL_FUNC) &_polyclid_polygon_get_hole,              2},
    {"_polyclid_polygon_is_clockwise",          (DL_FUNC) &_polyclid_polygon_is_clockwise,          1},
    {"_polyclid_polygon_is_collinear",          (DL_FUNC) &_polyclid_polygon_is_collinear,          1},
    {"_polyclid_polygon_is_convex",             (DL_FUNC) &_polyclid_polygon_is_convex,             1},
    {"_polyclid_polygon_is_counterclockwise",   (DL_FUNC) &_polyclid_polygon_is_counterclockwise,   1},
    {"_polyclid_polygon_is_relatively_simple",  (DL_FUNC) &_polyclid_polygon_is_relatively_simple,  1},
    {"_polyclid_polygon_is_simple",             (DL_FUNC) &_polyclid_polygon_is_simple,             1},
    {"_polyclid_polygon_is_valid",              (DL_FUNC) &_polyclid_polygon_is_valid,              1},
    {"_polyclid_polygon_make_valid",            (DL_FUNC) &_polyclid_polygon_make_valid,            1},
    {"_polyclid_polygon_n_holes",               (DL_FUNC) &_polyclid_polygon_n_holes,               1},
    {"_polyclid_polygon_remove_hole",           (DL_FUNC) &_polyclid_polygon_remove_hole,           2},
    {"_polyclid_polygon_set_boundary",          (DL_FUNC) &_polyclid_polygon_set_boundary,          2},
    {"_polyclid_polygon_set_hole",              (DL_FUNC) &_polyclid_polygon_set_hole,              3},
    {"_polyclid_polygon_sub_cardinality",       (DL_FUNC) &_polyclid_polygon_sub_cardinality,       1},
    {"_polyclid_polyline_is_selfintersecting",  (DL_FUNC) &_polyclid_polyline_is_selfintersecting,  1},
    {"_polyclid_polyline_is_x_monotone",        (DL_FUNC) &_polyclid_polyline_is_x_monotone,        1},
    {"_polyclid_polyline_is_x_weakly_monotone", (DL_FUNC) &_polyclid_polyline_is_x_weakly_monotone, 1},
    {"_polyclid_polyline_is_y_monotone",        (DL_FUNC) &_polyclid_polyline_is_y_monotone,        1},
    {"_polyclid_polyline_is_y_weakly_monotone", (DL_FUNC) &_polyclid_polyline_is_y_weakly_monotone, 1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_polyclid(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
