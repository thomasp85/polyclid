// Generated by cpp11: do not edit by hand
// clang-format off

#include "polyclid_types.h"
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// poly_common.cpp
cpp11::writable::strings poly_primitive_type(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_primitive_type(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_primitive_type(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
int poly_length(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_length(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_length(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::strings poly_definition_names(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_definition_names(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_definition_names(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
SEXP poly_definition(poly_vector_base_p geometries, int which, cpp11::integers element);
extern "C" SEXP _polyclid_poly_definition(SEXP geometries, SEXP which, SEXP element) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_definition(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<int>>(which), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(element)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_set_definition(poly_vector_base_p geometries, int which, cpp11::integers element, SEXP value);
extern "C" SEXP _polyclid_poly_set_definition(SEXP geometries, SEXP which, SEXP element, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_set_definition(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<int>>(which), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(element), cpp11::as_cpp<cpp11::decay_t<SEXP>>(value)));
  END_CPP11
}
// poly_common.cpp
SEXP poly_vertex(poly_vector_base_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_poly_vertex(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_vertex(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_set_vertex(poly_vector_base_p geometries, cpp11::integers which, SEXP value);
extern "C" SEXP _polyclid_poly_set_vertex(SEXP geometries, SEXP which, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_set_vertex(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which), cpp11::as_cpp<cpp11::decay_t<SEXP>>(value)));
  END_CPP11
}
// poly_common.cpp
SEXP poly_edges(poly_vector_base_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_poly_edges(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_edges(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::integers poly_cardinality(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_cardinality(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_cardinality(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::integers poly_n_edges(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_n_edges(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_n_edges(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_subset(poly_vector_base_p geometries, cpp11::integers index);
extern "C" SEXP _polyclid_poly_subset(SEXP geometries, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_subset(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_copy(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_copy(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_copy(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_assign(poly_vector_base_p geometries, cpp11::integers index, poly_vector_base_p value);
extern "C" SEXP _polyclid_poly_assign(SEXP geometries, SEXP index, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_assign(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index), cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(value)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_combine(poly_vector_base_p geometries, cpp11::list_of< poly_vector_base_p > extra);
extern "C" SEXP _polyclid_poly_combine(SEXP geometries, SEXP extra) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_combine(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of< poly_vector_base_p >>>(extra)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_unique(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_unique(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_unique(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::logicals poly_duplicated(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_duplicated(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_duplicated(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::integers poly_any_duplicated(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_any_duplicated(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_any_duplicated(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::logicals poly_is_na(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_is_na(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_is_na(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
bool poly_any_na(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_any_na(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_any_na(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::doubles_matrix<> poly_to_matrix(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_to_matrix(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_to_matrix(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::strings poly_format(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_format(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_format(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_common.cpp
cpp11::writable::logicals poly_is_equal(poly_vector_base_p geometries1, poly_vector_base_p geometries2);
extern "C" SEXP _polyclid_poly_is_equal(SEXP geometries1, SEXP geometries2) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_is_equal(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries1), cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries2)));
  END_CPP11
}
// poly_common.cpp
poly_vector_base_p poly_transform(poly_vector_base_p geometries, SEXP affine);
extern "C" SEXP _polyclid_poly_transform(SEXP geometries, SEXP affine) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_transform(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(affine)));
  END_CPP11
}
// poly_common.cpp
SEXP poly_bbox(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_bbox(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_bbox(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_measures.cpp
cpp11::writable::doubles poly_approx_length(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_approx_length(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_approx_length(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_measures.cpp
cpp11::writable::doubles poly_approx_area(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_approx_area(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_approx_area(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_modifications.cpp
poly_vector_base_p poly_reverse_orientation(poly_vector_base_p poly);
extern "C" SEXP _polyclid_poly_reverse_orientation(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_reverse_orientation(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(poly)));
  END_CPP11
}
// poly_modifications.cpp
poly_vector_base_p polygon_make_valid(polygon_p poly);
extern "C" SEXP _polyclid_polygon_make_valid(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_make_valid(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_modifications.cpp
poly_vector_base_p polygon_connect_holes(polygon_p poly);
extern "C" SEXP _polyclid_polygon_connect_holes(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_connect_holes(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_is_degenerate(poly_vector_base_p geometries);
extern "C" SEXP _polyclid_poly_is_degenerate(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_is_degenerate(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_inside(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_inside(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_inside(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_on(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_on(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_on(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_outside(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_outside(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_outside(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_on_positive(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_on_positive(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_on_positive(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals poly_has_point_on_negative(poly_vector_base_p geometries, SEXP points);
extern "C" SEXP _polyclid_poly_has_point_on_negative(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_has_point_on_negative(cpp11::as_cpp<cpp11::decay_t<poly_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_valid(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_valid(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_valid(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_clockwise(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_clockwise(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_clockwise(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_counterclockwise(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_counterclockwise(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_counterclockwise(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_convex(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_convex(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_convex(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_simple(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_simple(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_simple(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_relatively_simple(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_relatively_simple(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_relatively_simple(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polygon_is_collinear(polygon_p poly);
extern "C" SEXP _polyclid_polygon_is_collinear(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_collinear(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_x_monotone(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_x_monotone(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_x_monotone(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_y_monotone(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_y_monotone(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_y_monotone(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_x_weakly_monotone(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_x_weakly_monotone(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_x_weakly_monotone(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_y_weakly_monotone(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_y_weakly_monotone(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_y_weakly_monotone(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// poly_predicates.cpp
cpp11::writable::logicals polyline_is_selfintersecting(polyline_p poly);
extern "C" SEXP _polyclid_polyline_is_selfintersecting(SEXP poly) {
  BEGIN_CPP11
    return cpp11::as_sexp(polyline_is_selfintersecting(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(poly)));
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_empty();
extern "C" SEXP _polyclid_create_polygon_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_empty());
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_single(SEXP p);
extern "C" SEXP _polyclid_create_polygon_single(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_single(cpp11::as_cpp<cpp11::decay_t<SEXP>>(p)));
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_list(cpp11::list ps);
extern "C" SEXP _polyclid_create_polygon_list(SEXP ps) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(ps)));
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_list_list(cpp11::list pss);
extern "C" SEXP _polyclid_create_polygon_list_list(SEXP pss) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_list_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(pss)));
  END_CPP11
}
// polygon.cpp
polygon_p create_polygon_triangle(SEXP triangles);
extern "C" SEXP _polyclid_create_polygon_triangle(SEXP triangles) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygon_triangle(cpp11::as_cpp<cpp11::decay_t<SEXP>>(triangles)));
  END_CPP11
}
// polygon.cpp
cpp11::writable::integers polygon_sub_cardinality(polygon_p geometries);
extern "C" SEXP _polyclid_polygon_sub_cardinality(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_sub_cardinality(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries)));
  END_CPP11
}
// polygon.cpp
cpp11::writable::integers polygon_n_holes(polygon_p geometries);
extern "C" SEXP _polyclid_polygon_n_holes(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_n_holes(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries)));
  END_CPP11
}
// polygon.cpp
cpp11::writable::logicals polygon_is_unbounded(polygon_p geometries);
extern "C" SEXP _polyclid_polygon_is_unbounded(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_is_unbounded(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_get_boundary(polygon_p geometries);
extern "C" SEXP _polyclid_polygon_get_boundary(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_get_boundary(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_set_boundary(polygon_p geometries, polygon_p other);
extern "C" SEXP _polyclid_polygon_set_boundary(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_set_boundary(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_p>>(other)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_get_hole(polygon_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_polygon_get_hole(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_get_hole(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_remove_hole(polygon_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_polygon_remove_hole(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_remove_hole(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_add_hole(polygon_p geometries, polygon_p other);
extern "C" SEXP _polyclid_polygon_add_hole(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_add_hole(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_p>>(other)));
  END_CPP11
}
// polygon.cpp
polygon_p polygon_set_hole(polygon_p geometries, cpp11::integers which, polygon_p other);
extern "C" SEXP _polyclid_polygon_set_hole(SEXP geometries, SEXP which, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_set_hole(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which), cpp11::as_cpp<cpp11::decay_t<polygon_p>>(other)));
  END_CPP11
}
// polygon_set.cpp
polygon_set_p create_polygonset_empty();
extern "C" SEXP _polyclid_create_polygonset_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygonset_empty());
  END_CPP11
}
// polygon_set.cpp
polygon_set_p create_polygonset_polygon(polygon_p p);
extern "C" SEXP _polyclid_create_polygonset_polygon(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygonset_polygon(cpp11::as_cpp<cpp11::decay_t<polygon_p>>(p)));
  END_CPP11
}
// polygon_set.cpp
polygon_set_p create_polygonset_list(cpp11::list_of<polygon_p> p);
extern "C" SEXP _polyclid_create_polygonset_list(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polygonset_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<polygon_p>>>(p)));
  END_CPP11
}
// polygon_set.cpp
cpp11::writable::integers polygonset_n_polygons(polygon_set_p geometries);
extern "C" SEXP _polyclid_polygonset_n_polygons(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_n_polygons(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_get_polygon(polygon_set_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_polygonset_get_polygon(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_get_polygon(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_get_all_polygon(polygon_set_p geometries);
extern "C" SEXP _polyclid_polygonset_get_all_polygon(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_get_all_polygon(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_complement(polygon_set_p geometries);
extern "C" SEXP _polyclid_polygonset_complement(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_complement(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_union(polygon_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polygonset_union(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_union(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_intersection(polygon_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polygonset_intersection(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_intersection(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_difference(polygon_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polygonset_difference(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_difference(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_symmetric_difference(polygon_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polygonset_symmetric_difference(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_symmetric_difference(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_cum_union(polygon_set_p geometries);
extern "C" SEXP _polyclid_polygonset_cum_union(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_cum_union(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_cum_intersection(polygon_set_p geometries);
extern "C" SEXP _polyclid_polygonset_cum_intersection(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_cum_intersection(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_cum_difference(polygon_set_p geometries);
extern "C" SEXP _polyclid_polygonset_cum_difference(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_cum_difference(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_cum_symmetric_difference(polygon_set_p geometries);
extern "C" SEXP _polyclid_polygonset_cum_symmetric_difference(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_cum_symmetric_difference(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries)));
  END_CPP11
}
// polygon_set.cpp
cpp11::writable::logicals polygonset_do_intersect(polygon_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polygonset_do_intersect(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_do_intersect(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polygon_set.cpp
poly_vector_base_p polygonset_locate(polygon_set_p geometries, SEXP points);
extern "C" SEXP _polyclid_polygonset_locate(SEXP geometries, SEXP points) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_locate(cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<SEXP>>(points)));
  END_CPP11
}
// polyline.cpp
polyline_p create_polyline_empty();
extern "C" SEXP _polyclid_create_polyline_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polyline_empty());
  END_CPP11
}
// polyline.cpp
polyline_p create_polyline_single(SEXP p);
extern "C" SEXP _polyclid_create_polyline_single(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polyline_single(cpp11::as_cpp<cpp11::decay_t<SEXP>>(p)));
  END_CPP11
}
// polyline.cpp
polyline_p create_polyline_list(cpp11::list ps);
extern "C" SEXP _polyclid_create_polyline_list(SEXP ps) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polyline_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(ps)));
  END_CPP11
}
// polyline.cpp
polyline_p create_polyline_segment(SEXP segments);
extern "C" SEXP _polyclid_create_polyline_segment(SEXP segments) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polyline_segment(cpp11::as_cpp<cpp11::decay_t<SEXP>>(segments)));
  END_CPP11
}
// polyline_set.cpp
polyline_set_p create_polylineset_empty();
extern "C" SEXP _polyclid_create_polylineset_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polylineset_empty());
  END_CPP11
}
// polyline_set.cpp
polyline_set_p create_polylineset_polyline(polyline_p p);
extern "C" SEXP _polyclid_create_polylineset_polyline(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polylineset_polyline(cpp11::as_cpp<cpp11::decay_t<polyline_p>>(p)));
  END_CPP11
}
// polyline_set.cpp
polyline_set_p create_polylineset_list(cpp11::list_of<polyline_p> p);
extern "C" SEXP _polyclid_create_polylineset_list(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_polylineset_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<polyline_p>>>(p)));
  END_CPP11
}
// polyline_set.cpp
cpp11::writable::integers polylineset_n_polylines(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_n_polylines(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_n_polylines(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
cpp11::writable::integers polylineset_n_polylines_simplified(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_n_polylines_simplified(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_n_polylines_simplified(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_get_polylines(polyline_set_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_polylineset_get_polylines(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_get_polylines(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_get_all_polylines(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_get_all_polylines(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_get_all_polylines(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_get_polylines_simplified(polyline_set_p geometries, cpp11::integers which);
extern "C" SEXP _polyclid_polylineset_get_polylines_simplified(SEXP geometries, SEXP which) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_get_polylines_simplified(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(which)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_get_all_polylines_simplified(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_get_all_polylines_simplified(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_get_all_polylines_simplified(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
cpp11::writable::integers polylineset_vert_degree(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_vert_degree(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_vert_degree(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
cpp11::writable::list polylineset_vert_neighbors(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_vert_neighbors(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_vert_neighbors(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
cpp11::writable::list polylineset_polyline_verts(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_polyline_verts(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_polyline_verts(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
cpp11::writable::integers polylineset_n_faces(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_n_faces(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_n_faces(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_get_faces(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_get_faces(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_get_faces(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_union(polyline_set_p geometries, polyline_set_p other);
extern "C" SEXP _polyclid_polylineset_union(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_union(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_intersection(polyline_set_p geometries, polyline_set_p other);
extern "C" SEXP _polyclid_polylineset_intersection(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_intersection(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_difference(polyline_set_p geometries, polyline_set_p other);
extern "C" SEXP _polyclid_polylineset_difference(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_difference(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_symmetric_difference(polyline_set_p geometries, polyline_set_p other);
extern "C" SEXP _polyclid_polylineset_symmetric_difference(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_symmetric_difference(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_cum_union(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_cum_union(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_cum_union(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_cum_intersection(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_cum_intersection(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_cum_intersection(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_cum_difference(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_cum_difference(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_cum_difference(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_cum_symmetric_difference(polyline_set_p geometries);
extern "C" SEXP _polyclid_polylineset_cum_symmetric_difference(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_cum_symmetric_difference(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries)));
  END_CPP11
}
// polyline_set.cpp
cpp11::writable::logicals polylineset_do_intersect(polyline_set_p geometries, polyline_set_p other);
extern "C" SEXP _polyclid_polylineset_do_intersect(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_do_intersect(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_polygonset_union(polyline_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polylineset_polygonset_union(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_polygonset_union(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_polygonset_intersection(polyline_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polylineset_polygonset_intersection(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_polygonset_intersection(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_polygonset_difference(polyline_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polylineset_polygonset_difference(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_polygonset_difference(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polygonset_polylineset_difference(polyline_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polygonset_polylineset_difference(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygonset_polylineset_difference(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}
// polyline_set.cpp
poly_vector_base_p polylineset_polygonset_symmetric_difference(polyline_set_p geometries, polygon_set_p other);
extern "C" SEXP _polyclid_polylineset_polygonset_symmetric_difference(SEXP geometries, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(polylineset_polygonset_symmetric_difference(cpp11::as_cpp<cpp11::decay_t<polyline_set_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<polygon_set_p>>(other)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_polyclid_create_polygon_empty",                        (DL_FUNC) &_polyclid_create_polygon_empty,                        0},
    {"_polyclid_create_polygon_list",                         (DL_FUNC) &_polyclid_create_polygon_list,                         1},
    {"_polyclid_create_polygon_list_list",                    (DL_FUNC) &_polyclid_create_polygon_list_list,                    1},
    {"_polyclid_create_polygon_single",                       (DL_FUNC) &_polyclid_create_polygon_single,                       1},
    {"_polyclid_create_polygon_triangle",                     (DL_FUNC) &_polyclid_create_polygon_triangle,                     1},
    {"_polyclid_create_polygonset_empty",                     (DL_FUNC) &_polyclid_create_polygonset_empty,                     0},
    {"_polyclid_create_polygonset_list",                      (DL_FUNC) &_polyclid_create_polygonset_list,                      1},
    {"_polyclid_create_polygonset_polygon",                   (DL_FUNC) &_polyclid_create_polygonset_polygon,                   1},
    {"_polyclid_create_polyline_empty",                       (DL_FUNC) &_polyclid_create_polyline_empty,                       0},
    {"_polyclid_create_polyline_list",                        (DL_FUNC) &_polyclid_create_polyline_list,                        1},
    {"_polyclid_create_polyline_segment",                     (DL_FUNC) &_polyclid_create_polyline_segment,                     1},
    {"_polyclid_create_polyline_single",                      (DL_FUNC) &_polyclid_create_polyline_single,                      1},
    {"_polyclid_create_polylineset_empty",                    (DL_FUNC) &_polyclid_create_polylineset_empty,                    0},
    {"_polyclid_create_polylineset_list",                     (DL_FUNC) &_polyclid_create_polylineset_list,                     1},
    {"_polyclid_create_polylineset_polyline",                 (DL_FUNC) &_polyclid_create_polylineset_polyline,                 1},
    {"_polyclid_poly_any_duplicated",                         (DL_FUNC) &_polyclid_poly_any_duplicated,                         1},
    {"_polyclid_poly_any_na",                                 (DL_FUNC) &_polyclid_poly_any_na,                                 1},
    {"_polyclid_poly_approx_area",                            (DL_FUNC) &_polyclid_poly_approx_area,                            1},
    {"_polyclid_poly_approx_length",                          (DL_FUNC) &_polyclid_poly_approx_length,                          1},
    {"_polyclid_poly_assign",                                 (DL_FUNC) &_polyclid_poly_assign,                                 3},
    {"_polyclid_poly_bbox",                                   (DL_FUNC) &_polyclid_poly_bbox,                                   1},
    {"_polyclid_poly_cardinality",                            (DL_FUNC) &_polyclid_poly_cardinality,                            1},
    {"_polyclid_poly_combine",                                (DL_FUNC) &_polyclid_poly_combine,                                2},
    {"_polyclid_poly_copy",                                   (DL_FUNC) &_polyclid_poly_copy,                                   1},
    {"_polyclid_poly_definition",                             (DL_FUNC) &_polyclid_poly_definition,                             3},
    {"_polyclid_poly_definition_names",                       (DL_FUNC) &_polyclid_poly_definition_names,                       1},
    {"_polyclid_poly_duplicated",                             (DL_FUNC) &_polyclid_poly_duplicated,                             1},
    {"_polyclid_poly_edges",                                  (DL_FUNC) &_polyclid_poly_edges,                                  2},
    {"_polyclid_poly_format",                                 (DL_FUNC) &_polyclid_poly_format,                                 1},
    {"_polyclid_poly_has_point_inside",                       (DL_FUNC) &_polyclid_poly_has_point_inside,                       2},
    {"_polyclid_poly_has_point_on",                           (DL_FUNC) &_polyclid_poly_has_point_on,                           2},
    {"_polyclid_poly_has_point_on_negative",                  (DL_FUNC) &_polyclid_poly_has_point_on_negative,                  2},
    {"_polyclid_poly_has_point_on_positive",                  (DL_FUNC) &_polyclid_poly_has_point_on_positive,                  2},
    {"_polyclid_poly_has_point_outside",                      (DL_FUNC) &_polyclid_poly_has_point_outside,                      2},
    {"_polyclid_poly_is_degenerate",                          (DL_FUNC) &_polyclid_poly_is_degenerate,                          1},
    {"_polyclid_poly_is_equal",                               (DL_FUNC) &_polyclid_poly_is_equal,                               2},
    {"_polyclid_poly_is_na",                                  (DL_FUNC) &_polyclid_poly_is_na,                                  1},
    {"_polyclid_poly_length",                                 (DL_FUNC) &_polyclid_poly_length,                                 1},
    {"_polyclid_poly_n_edges",                                (DL_FUNC) &_polyclid_poly_n_edges,                                1},
    {"_polyclid_poly_primitive_type",                         (DL_FUNC) &_polyclid_poly_primitive_type,                         1},
    {"_polyclid_poly_reverse_orientation",                    (DL_FUNC) &_polyclid_poly_reverse_orientation,                    1},
    {"_polyclid_poly_set_definition",                         (DL_FUNC) &_polyclid_poly_set_definition,                         4},
    {"_polyclid_poly_set_vertex",                             (DL_FUNC) &_polyclid_poly_set_vertex,                             3},
    {"_polyclid_poly_subset",                                 (DL_FUNC) &_polyclid_poly_subset,                                 2},
    {"_polyclid_poly_to_matrix",                              (DL_FUNC) &_polyclid_poly_to_matrix,                              1},
    {"_polyclid_poly_transform",                              (DL_FUNC) &_polyclid_poly_transform,                              2},
    {"_polyclid_poly_unique",                                 (DL_FUNC) &_polyclid_poly_unique,                                 1},
    {"_polyclid_poly_vertex",                                 (DL_FUNC) &_polyclid_poly_vertex,                                 2},
    {"_polyclid_polygon_add_hole",                            (DL_FUNC) &_polyclid_polygon_add_hole,                            2},
    {"_polyclid_polygon_connect_holes",                       (DL_FUNC) &_polyclid_polygon_connect_holes,                       1},
    {"_polyclid_polygon_get_boundary",                        (DL_FUNC) &_polyclid_polygon_get_boundary,                        1},
    {"_polyclid_polygon_get_hole",                            (DL_FUNC) &_polyclid_polygon_get_hole,                            2},
    {"_polyclid_polygon_is_clockwise",                        (DL_FUNC) &_polyclid_polygon_is_clockwise,                        1},
    {"_polyclid_polygon_is_collinear",                        (DL_FUNC) &_polyclid_polygon_is_collinear,                        1},
    {"_polyclid_polygon_is_convex",                           (DL_FUNC) &_polyclid_polygon_is_convex,                           1},
    {"_polyclid_polygon_is_counterclockwise",                 (DL_FUNC) &_polyclid_polygon_is_counterclockwise,                 1},
    {"_polyclid_polygon_is_relatively_simple",                (DL_FUNC) &_polyclid_polygon_is_relatively_simple,                1},
    {"_polyclid_polygon_is_simple",                           (DL_FUNC) &_polyclid_polygon_is_simple,                           1},
    {"_polyclid_polygon_is_unbounded",                        (DL_FUNC) &_polyclid_polygon_is_unbounded,                        1},
    {"_polyclid_polygon_is_valid",                            (DL_FUNC) &_polyclid_polygon_is_valid,                            1},
    {"_polyclid_polygon_make_valid",                          (DL_FUNC) &_polyclid_polygon_make_valid,                          1},
    {"_polyclid_polygon_n_holes",                             (DL_FUNC) &_polyclid_polygon_n_holes,                             1},
    {"_polyclid_polygon_remove_hole",                         (DL_FUNC) &_polyclid_polygon_remove_hole,                         2},
    {"_polyclid_polygon_set_boundary",                        (DL_FUNC) &_polyclid_polygon_set_boundary,                        2},
    {"_polyclid_polygon_set_hole",                            (DL_FUNC) &_polyclid_polygon_set_hole,                            3},
    {"_polyclid_polygon_sub_cardinality",                     (DL_FUNC) &_polyclid_polygon_sub_cardinality,                     1},
    {"_polyclid_polygonset_complement",                       (DL_FUNC) &_polyclid_polygonset_complement,                       1},
    {"_polyclid_polygonset_cum_difference",                   (DL_FUNC) &_polyclid_polygonset_cum_difference,                   1},
    {"_polyclid_polygonset_cum_intersection",                 (DL_FUNC) &_polyclid_polygonset_cum_intersection,                 1},
    {"_polyclid_polygonset_cum_symmetric_difference",         (DL_FUNC) &_polyclid_polygonset_cum_symmetric_difference,         1},
    {"_polyclid_polygonset_cum_union",                        (DL_FUNC) &_polyclid_polygonset_cum_union,                        1},
    {"_polyclid_polygonset_difference",                       (DL_FUNC) &_polyclid_polygonset_difference,                       2},
    {"_polyclid_polygonset_do_intersect",                     (DL_FUNC) &_polyclid_polygonset_do_intersect,                     2},
    {"_polyclid_polygonset_get_all_polygon",                  (DL_FUNC) &_polyclid_polygonset_get_all_polygon,                  1},
    {"_polyclid_polygonset_get_polygon",                      (DL_FUNC) &_polyclid_polygonset_get_polygon,                      2},
    {"_polyclid_polygonset_intersection",                     (DL_FUNC) &_polyclid_polygonset_intersection,                     2},
    {"_polyclid_polygonset_locate",                           (DL_FUNC) &_polyclid_polygonset_locate,                           2},
    {"_polyclid_polygonset_n_polygons",                       (DL_FUNC) &_polyclid_polygonset_n_polygons,                       1},
    {"_polyclid_polygonset_polylineset_difference",           (DL_FUNC) &_polyclid_polygonset_polylineset_difference,           2},
    {"_polyclid_polygonset_symmetric_difference",             (DL_FUNC) &_polyclid_polygonset_symmetric_difference,             2},
    {"_polyclid_polygonset_union",                            (DL_FUNC) &_polyclid_polygonset_union,                            2},
    {"_polyclid_polyline_is_selfintersecting",                (DL_FUNC) &_polyclid_polyline_is_selfintersecting,                1},
    {"_polyclid_polyline_is_x_monotone",                      (DL_FUNC) &_polyclid_polyline_is_x_monotone,                      1},
    {"_polyclid_polyline_is_x_weakly_monotone",               (DL_FUNC) &_polyclid_polyline_is_x_weakly_monotone,               1},
    {"_polyclid_polyline_is_y_monotone",                      (DL_FUNC) &_polyclid_polyline_is_y_monotone,                      1},
    {"_polyclid_polyline_is_y_weakly_monotone",               (DL_FUNC) &_polyclid_polyline_is_y_weakly_monotone,               1},
    {"_polyclid_polylineset_cum_difference",                  (DL_FUNC) &_polyclid_polylineset_cum_difference,                  1},
    {"_polyclid_polylineset_cum_intersection",                (DL_FUNC) &_polyclid_polylineset_cum_intersection,                1},
    {"_polyclid_polylineset_cum_symmetric_difference",        (DL_FUNC) &_polyclid_polylineset_cum_symmetric_difference,        1},
    {"_polyclid_polylineset_cum_union",                       (DL_FUNC) &_polyclid_polylineset_cum_union,                       1},
    {"_polyclid_polylineset_difference",                      (DL_FUNC) &_polyclid_polylineset_difference,                      2},
    {"_polyclid_polylineset_do_intersect",                    (DL_FUNC) &_polyclid_polylineset_do_intersect,                    2},
    {"_polyclid_polylineset_get_all_polylines",               (DL_FUNC) &_polyclid_polylineset_get_all_polylines,               1},
    {"_polyclid_polylineset_get_all_polylines_simplified",    (DL_FUNC) &_polyclid_polylineset_get_all_polylines_simplified,    1},
    {"_polyclid_polylineset_get_faces",                       (DL_FUNC) &_polyclid_polylineset_get_faces,                       1},
    {"_polyclid_polylineset_get_polylines",                   (DL_FUNC) &_polyclid_polylineset_get_polylines,                   2},
    {"_polyclid_polylineset_get_polylines_simplified",        (DL_FUNC) &_polyclid_polylineset_get_polylines_simplified,        2},
    {"_polyclid_polylineset_intersection",                    (DL_FUNC) &_polyclid_polylineset_intersection,                    2},
    {"_polyclid_polylineset_n_faces",                         (DL_FUNC) &_polyclid_polylineset_n_faces,                         1},
    {"_polyclid_polylineset_n_polylines",                     (DL_FUNC) &_polyclid_polylineset_n_polylines,                     1},
    {"_polyclid_polylineset_n_polylines_simplified",          (DL_FUNC) &_polyclid_polylineset_n_polylines_simplified,          1},
    {"_polyclid_polylineset_polygonset_difference",           (DL_FUNC) &_polyclid_polylineset_polygonset_difference,           2},
    {"_polyclid_polylineset_polygonset_intersection",         (DL_FUNC) &_polyclid_polylineset_polygonset_intersection,         2},
    {"_polyclid_polylineset_polygonset_symmetric_difference", (DL_FUNC) &_polyclid_polylineset_polygonset_symmetric_difference, 2},
    {"_polyclid_polylineset_polygonset_union",                (DL_FUNC) &_polyclid_polylineset_polygonset_union,                2},
    {"_polyclid_polylineset_polyline_verts",                  (DL_FUNC) &_polyclid_polylineset_polyline_verts,                  1},
    {"_polyclid_polylineset_symmetric_difference",            (DL_FUNC) &_polyclid_polylineset_symmetric_difference,            2},
    {"_polyclid_polylineset_union",                           (DL_FUNC) &_polyclid_polylineset_union,                           2},
    {"_polyclid_polylineset_vert_degree",                     (DL_FUNC) &_polyclid_polylineset_vert_degree,                     1},
    {"_polyclid_polylineset_vert_neighbors",                  (DL_FUNC) &_polyclid_polylineset_vert_neighbors,                  1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_polyclid(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
