[{"path":[]},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement thomasp85@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://polyclid.r-euclid.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://polyclid.r-euclid.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 polyclid authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://polyclid.r-euclid.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Lin Pedersen. Author, maintainer.","code":""},{"path":"https://polyclid.r-euclid.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pedersen T (2023). polyclid: Polygon Polyline Support Euclid. https://github.com/thomasp85/polyclid, http://polyclid.r-euclid.com/.","code":"@Manual{,   title = {polyclid: Polygon and Polyline Support for Euclid},   author = {Thomas Lin Pedersen},   year = {2023},   note = {https://github.com/thomasp85/polyclid, http://polyclid.r-euclid.com/}, }"},{"path":"https://polyclid.r-euclid.com/index.html","id":"polyclid-","dir":"","previous_headings":"","what":"polyclid: Polygon and polyline for euclid\n","title":"polyclid: Polygon and polyline for euclid\n","text":"polyclid extents computational geometry framework provided euclid providing base classes algorithms working 2D polygons polylines. new classes provided polyclid : polyline: line consisting several segments joined consecutively end points polygon: polygon optionally holes without “islands” (e.g. disjoint parts). polygon can unbounded, .e. extents infinitely plane polyline_set: collection polylines especially useful intermediary representation workflows facilitates line sweeping polygon_set: Like polygons. Boolean operations polygons create sets result may disjoint areas algorithms, extent makes sense methods provided euclid counterpart polyclid. , methods specific polygons polylines provided 2D boolean set operations, polygon validation, etc. intended polyclid provides full set polygon-centric operations, rather foundational package packages euclid ecosystem builds upon specialized algorithms.","code":""},{"path":"https://polyclid.r-euclid.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"polyclid: Polygon and polyline for euclid\n","text":"can install development version polyclid like :","code":"devtools::install_github(\"thomasp85/polyclid\")"},{"path":"https://polyclid.r-euclid.com/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"polyclid: Polygon and polyline for euclid\n","text":"Polygons areas 2 dimensions, often bounded outer ring possibly holes. polyclid possible polygon disjoint, .e. islands outside outer ring inside holes.  polygon type works much way base euclid types responds methods appropriate: also additional methods predicates, e.g.  particular note full set 2D boolean operations fully vectorised along two vectors polygons, cumulative operation along one vector   just taster. Explore vignette -depth overview.","code":"library(polyclid)  # Create a polygon by specifying the x and y coordinates of the rings p <- polygon(   x = c(0, 2, 2, -1, -0.25, 1, 1, 1.5, 1.2, -1, -3),   y = c(0, 0, 1.5, 1.5, 1, 0.5, 1.25, 0.75, 0.75, 0.5, -1),   id = c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2),   hole_id = c(1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1) ) p #> <2D polyclid_polygons [2]> #> [1] [Boundary: 5, Range: <<-1, 0>, <2, 1.5>>, Holes: 1]     #> [2] [Boundary: 3, Range: <<-3, -1>, <1.2, 0.75>>, Holes: 0] plot(p, col = c(\"steelblue\", \"forestgreen\")) approx_area(p) #> [1] 3.625 1.400 cardinality(p) #> [1] 8 3 vert(p) #> <2D points [11]> #>  [1] <x:0, y:0>      <x:2, y:0>      <x:2, y:1.5>    <x:-1, y:1.5>   #>  [5] <x:-0.25, y:1>  <x:1, y:0.5>    <x:1, y:1.25>   <x:1.5, y:0.75> #>  [9] <x:1.2, y:0.75> <x:-1, y:0.5>   <x:-3, y:-1> has_inside(p, point(0, 1)) #> [1]  TRUE FALSE is_convex(p) #> [1] FALSE  TRUE hole(p[2]) <- circle(point(-0.8, 0.2), 0.05) plot(p, col = c(\"steelblue\", \"forestgreen\")) p_symdif <- symmetric_difference(p) plot(p_symdif, col = \"steelblue\") circles <- circle(point(c(1, -2), c(0, 0)), 0.5) p_union <- union(p, circles) plot(p_union, col = c(\"steelblue\", \"forestgreen\"))"},{"path":"https://polyclid.r-euclid.com/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"polyclid: Polygon and polyline for euclid\n","text":"Please note polyclid project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://polyclid.r-euclid.com/reference/connect_polylines.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect polylines together to a single line — connect_polylines","title":"Connect polylines together to a single line — connect_polylines","text":"Taking union() polylines connect together, places arrangement (might even break depending monotonicity). connect_polylines() exactly advertises. takes vector polylines (list polyline vectors) combines single polyline connecting endpoint polyline start point next. end start equal duplicate vertex removed.","code":""},{"path":"https://polyclid.r-euclid.com/reference/connect_polylines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect polylines together to a single line — connect_polylines","text":"","code":"connect_polylines(x, na.rm = TRUE)"},{"path":"https://polyclid.r-euclid.com/reference/connect_polylines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect polylines together to a single line — connect_polylines","text":"x polyclid_polyline vector list na.rm NA values removed connecting. FALSE input contains NA, result NA.","code":""},{"path":"https://polyclid.r-euclid.com/reference/connect_polylines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect polylines together to a single line — connect_polylines","text":"polyclid_polyline vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/connect_polylines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect polylines together to a single line — connect_polylines","text":"","code":"sine <- polyline(   seq(0, 2*pi, length.out = 20),   sin(seq(0, 2*pi, length.out = 20)) ) loop <- polyline(   c(0, 5, 6, 5, 0),   c(-1, 1, 0, -1, 1) ) pl <- c(sine, loop)  plot(connect_polylines(pl))   sine1 <- sine[1:10] sine2 <- sine[10:20]  sine == connect_polylines(c(sine1, sine2)) #> [1] TRUE"},{"path":"https://polyclid.r-euclid.com/reference/is_monotone.html","id":null,"dir":"Reference","previous_headings":"","what":"Polyline monotonicity — is_monotone","title":"Polyline monotonicity — is_monotone","text":"Monotonicity describes property values along line ever increasing decreasing, .e. f(x) > f(x + 1) || f(x) < f(x + 1). weak version allows equality well, .e. f(x) >= f(x + 1) || f(x) <= f(x + 1).","code":""},{"path":"https://polyclid.r-euclid.com/reference/is_monotone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polyline monotonicity — is_monotone","text":"","code":"is_monotone(x, dim = \"both\")  is_weakly_monotone(x, dim = \"x\")  is_selfintersecting(x)"},{"path":"https://polyclid.r-euclid.com/reference/is_monotone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polyline monotonicity — is_monotone","text":"x polyclid_polyline vector dim Either \"x\" \"y\" indicate dimension test monotonicity ","code":""},{"path":"https://polyclid.r-euclid.com/reference/is_monotone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polyline monotonicity — is_monotone","text":"logical vector length x","code":""},{"path":"https://polyclid.r-euclid.com/reference/is_monotone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Polyline monotonicity — is_monotone","text":"polyline least weakly monotone one dimension chance intersects . can queried is_selfintersecting().","code":""},{"path":"https://polyclid.r-euclid.com/reference/is_monotone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polyline monotonicity — is_monotone","text":"","code":"sine <- polyline(   seq(0, 2*pi, length.out = 20),   sin(seq(0, 2*pi, length.out = 20)) ) is_monotone(sine, \"x\") #> [1] TRUE is_monotone(sine, \"y\") #> [1] FALSE  poly <- polyline(   c(0, 1, 1, 2),   c(0, 1, 2, 3) )  is_monotone(sine, \"x\") #> [1] TRUE is_weakly_monotone(sine, \"x\") #> [1] TRUE"},{"path":"https://polyclid.r-euclid.com/reference/is_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon validity — is_valid","title":"Polygon validity — is_valid","text":"polygon vector can hold less combination rings, certain subset valid produce correct answer various functions. Algorithms require valid polygon attempt fix invalid polygons beforehand, often better construction avoid repeated repairs every time algorithm called polygon.","code":""},{"path":"https://polyclid.r-euclid.com/reference/is_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygon validity — is_valid","text":"","code":"is_valid(x)  make_valid(x)"},{"path":"https://polyclid.r-euclid.com/reference/is_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polygon validity — is_valid","text":"x polyclid_polygon vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/is_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polygon validity — is_valid","text":"is_valid() returns logical vector length x. make_valid() returns polyclid_polygon() vector length x.","code":""},{"path":"https://polyclid.r-euclid.com/reference/is_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Polygon validity — is_valid","text":"requirement valid polygon polyclid follow: outer boundary must relatively simple holes must simple outer boundary must oriented counter-clockwise holes must clockwise holes outer boundary must pairwise disjoint except vertices. holes must contained inside outer boundary holes must partly fully overlap make_valid() attempts correct invalid polygon following way: Checks outer boundary relatively simple. returns NA. Checks corrects orientation outer boundery. Checks holes simple. returns NA. Checks fixes orientation holes. One one uses boolean difference cut holes boundary. means holes outside boundary ignored, overlapping holes merged, holes intersecting boundary become part boundary. 5 resulted cutting polygon multiple disjoint parts one returned. polygon remains connected course returned. calling is_valid() result cached polygon avoid repeated checks. modification polygon course clear cache. polygon cached result indicates polygon valid returned .","code":""},{"path":"https://polyclid.r-euclid.com/reference/is_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polygon validity — is_valid","text":"","code":"poly <- polygon(   c(0, 10, 10, 0),   c(10, 10, 0, 0) )  # Outer boundary must be counterclockwise for the polygon to be valid is_clockwise(poly) #> [1] TRUE is_valid(poly) #> [1] FALSE  poly <- reverse_orientation(poly) is_valid(poly) #> [1] TRUE  h <- polygon(   c(2, 4, 2),   c(2, 2, 4) )  # Holes must be clockwise is_counterclockwise(h) #> [1] TRUE hole(poly) <- h is_valid(poly) #> [1] FALSE  hole(poly, 1) <- reverse_orientation(h) is_valid(poly) #> [1] TRUE  # Holes must be completely contained and non-overlapping with the boundary h <- as_polygon(euclid::circle(euclid::point(8, 8), 15)) plot(c(poly, h))   hole(poly) <- h is_valid(poly) #> [1] FALSE  # Use make_valid() to resolve holes (and orientation) poly <- make_valid(poly) plot(poly)  is_valid(poly) #> [1] TRUE  # not all polygons can be made valid, specifically rings that are not # relatively simple cannot be fixed poly <- polygon(   c(0, 10, 10, 0),   c(0, 10, 0, 10) ) is_valid(poly) #> [1] FALSE plot(poly, force_valid = FALSE)   # Trying to make them valid will return NA make_valid(poly) #> <2D polyclid_polygons [1]> #> [1] <NA>"},{"path":"https://polyclid.r-euclid.com/reference/poly_bool.html","id":null,"dir":"Reference","previous_headings":"","what":"Boolean set operations on polygons and polylines — poly_bool","title":"Boolean set operations on polygons and polylines — poly_bool","text":"polyclid extents set boolean set operations euclid work polylines polygons sets . boolean operations capacity produce multiple polygons poylines single one, output boolean operations always polygon_set polyline_set even input polygon polyline vectors. fact polygon polyline versions operations simple wrappers converts input respective set versions first.","code":""},{"path":"https://polyclid.r-euclid.com/reference/poly_bool.html","id":"operations-between-polygons","dir":"Reference","previous_headings":"","what":"Operations between polygons","title":"Boolean set operations on polygons and polylines — poly_bool","text":"set operations performed polygons /polygon sets (euclid geometries can considered polygons: circles, triangles iso rectangles), output always polygon_set, even result single polygon. done ensure known output type, also polygon sets internal representation used boolean operations returning native representation thus performant. union() combine two polygons one (touch overlaps) insert set disjoint. intersection() return area two inputs interior joint (overlapping). difference() remove overlapping areas polygon(s) first given first argument. symmetric_difference() return areas inputs overlapping. complement() returns inverse input, .e. areas outside input polygon(s) inside returned polygon. one argument given, cumulative operation performed input. union() intersection() can done single aggregate operation whereas difference() symmetric_difference() done one time.","code":""},{"path":"https://polyclid.r-euclid.com/reference/poly_bool.html","id":"operations-between-polylines","dir":"Reference","previous_headings":"","what":"Operations between polylines","title":"Boolean set operations on polygons and polylines — poly_bool","text":"Boolean set operations polylines /polyline sets (segments) always return polyline sets. sets can mix polylines isolated vertices depending input. union() combine polylines single set. Lines meeting end points merged, can extracted as_polyline(..., simplify = TRUE). reason merging lines eagerly bad performance alter topology set. , set already splits polylines x monotone parts 1--1 relationship polylines polyline sets either way. intersection() return points inputs crossing along line segments overlapping. difference() insert vertices first polyline (set) inputs crossing remove line segments overlap. symmetric_difference() return parts either input overlap contrary polygons, single argument version polylines, mainly need really .","code":""},{"path":"https://polyclid.r-euclid.com/reference/poly_bool.html","id":"operations-between-polylines-and-polygons","dir":"Reference","previous_headings":"","what":"Operations between polylines and polygons","title":"Boolean set operations on polygons and polylines — poly_bool","text":"operations polygons polylines interpretation happen unclear. following definitions therefore mainly makes sense context package. return value always polyline set, depending operation, may faces set interpretational relevance. union() combine polylines polygons single set. overlap polyline interior polygon removed point set covered polygon intersection() return polyline part lies inside polygon represent shared point set. difference() polyline (set) first argument parts overlapping polygon removed. polygon (set) first argument polygon(s) cut two polyline(s). symmetric_difference() return polylines polygons overlayed single polygon set. many assume union .","code":""},{"path":"https://polyclid.r-euclid.com/reference/poly_bool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boolean set operations on polygons and polylines — poly_bool","text":"","code":"## Polygons  circ <- as_polygon(circle(euclid::point(0, 0), 1)) rect1 <- polygon(   c(0.5, 1.5, 2.5, 1.5),   c(0, -1, 0, 1) ) rect2 <- transform(rect1, euclid::affine_translate(vec(-3, 0)))  # Union of disjoint polygons places them in the same set rects <- union(rect1, rect2) plot(rects)   # Union of overlapping polygons plot(union(rects, circ))   # Intersection of disjoint polygons is empty intersection(rect1, rect2) #> <2D polyclid_polygon_sets [1]> #> [1] [empty]  # For overlapping polygons it gives the overlap plot(intersection(rects, circ))   # Difference cuts out one polygon from the other plot(difference(rects, circ))  plot(difference(circ, rects))   # and symmetric difference gives the disjoint parts plot(symmetric_difference(rects, circ), col = 'grey')   # complement flippes it around, turning a bounded polygon into an unbounded plot(complement(rects), col = \"grey\")   ## Polylines  sine <- polyline(   seq(0, 2*pi, length.out = 20),   sin(seq(0, 2*pi, length.out = 20)) ) loop <- polyline(   c(0, 5, 6, 5, 0),   c(-1, 1, 0, -1, 1) ) line <- polyline(   c(0, 4, 6),   c(0, -2, 0) )  # Union combines the two polyline (sets) and splits up lines where they cross ps <- union(sine, loop) plot(ps) euclid_plot(vert(ps))   # Union will both return the isolated vertices of the cross points along with # any overlapping segments ps <- intersection(sine, loop) plot(c(sine, loop)) euclid_plot(vert(ps), col = \"red\")   ps <- intersection(line, loop) plot(c(line, loop)) euclid_plot(ps, col = \"red\", lty = 3, lwd = 4) euclid_plot(vert(ps)[vert_degree(ps) == 0], col = \"red\")   # Difference will cut lines at intersection points and remove overlapping # segments from the first argument ps <- difference(loop, line) plot(ps) euclid_plot(vert(ps))   # Symmetric difference will remove overlapping segments from the union ps <- symmetric_difference(loop, line) plot(ps) euclid_plot(vert(ps))   ## Polygons and polylines  # Union merges the two, removing any segments of the polyline interior to the # polygon plot(union(sine, circ))   # Intersection returns the part of the polyline interior to the polygon plot(rect1, xlim = c(0, 6)) euclid_plot(loop) euclid_plot(intersection(loop, rect1), col = \"red\", lwd = 4)   # Difference depends on whether the polygon or polyline is the first argument # subtracting a polygon from a polyline removes the parts of the polyline # interior to the polygon plot(difference(loop, rect1))   # subtracting a polyline from a polygon will cut the polygon along the lines # where the polyline intersects it plot(difference(rect1, loop))   # Symmetric difference is the union of the two difference results which is # basically the overlay of the two topologies plot(symmetric_difference(rect1, loop))"},{"path":"https://polyclid.r-euclid.com/reference/polyclid-package.html","id":null,"dir":"Reference","previous_headings":"","what":"polyclid: Polygon and Polyline Support for Euclid — polyclid-package","title":"polyclid: Polygon and Polyline Support for Euclid — polyclid-package","text":"Provides polygon polyline vector type 'euclid' ecosystem, along several algorithms specific geometry types.","code":""},{"path":[]},{"path":"https://polyclid.r-euclid.com/reference/polyclid-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"polyclid: Polygon and Polyline Support for Euclid — polyclid-package","text":"Maintainer: Thomas Lin Pedersen thomasp85@gmail.com (ORCID)","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of polygons — polygon","title":"Vector of polygons — polygon","text":"polygon set points defining boundary region. polygon can contain one holes. must fully contained inside outer boundary.","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of polygons — polygon","text":"","code":"polygon(..., id = NULL, hole_id = NULL)  is_polygon(x)  as_polygon(x, ...)"},{"path":"https://polyclid.r-euclid.com/reference/polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector of polygons — polygon","text":"... Vector points, numerics, list. See Constructors sections id integer vector length points, dividing points separate polygons (used points point vector) hole_id integer vector length points, dividing points boundary separate holes (used points point vector). x object convertible polygon vector polygon vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector of polygons — polygon","text":"polyclid_polygon vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Vector of polygons — polygon","text":"Providing 2D points vector id holes_id construct single polygon holes Providing 2D points vector id vector create vector polygons holes Providing 2D points vector holes_id vector construct single polygon holes Providing 2D points vector, id vector, holes_id vector construct vector polygons holes , instead 2D point vector x y coordinates can supplied directly Providing list 2D point vectors construct vector polygons holes Providing list list 2D point vectors construct vector polygons holes , polygons can also constructed 2D segments triangles using as_polygon() function.","code":""},{"path":[]},{"path":"https://polyclid.r-euclid.com/reference/polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector of polygons — polygon","text":"","code":"points <- euclid::point(   c(1, 0, -1, -0.5, 0.5),   c(0, 1, 0, -1, -1) )  # Construct a single polygon from a vector of points poly <- polygon(points) poly #> <2D polyclid_polygons [1]> #> [1] [Boundary: 5, Range: <<-1, -1>, <1, 1>>, Holes: 0]  plot(poly, col = \"grey\")   # Or directly from x and y coordinates poly <- polygon(   c(1, 0, -1, -0.5, 0.5),   c(0, 1, 0, -1, -1) )  # Use id to split points into multiple polygons poly <- polygon(points[c(1, 2, 3, 4, 5, 1)], id = rep(1:2, each = 3)) poly #> <2D polyclid_polygons [2]> #> [1] [Boundary: 3, Range: <<-1, 0>, <1, 1>>, Holes: 0]    #> [2] [Boundary: 3, Range: <<-0.5, -1>, <1, 0>>, Holes: 0] plot(poly, col = \"grey\")   # Use a list of lists to define polygons with holes poly <- polygon(list(   list(     points,     euclid::point(c(0, 0.5, -0.5), c(0.5, -0.5, -0.5))   ) )) plot(poly, col = \"grey\")   # or use hole_id to similar effect (same polygon as above) poly2 <- polygon(   c(points, euclid::point(c(0, 0.5, -0.5), c(0.5, -0.5, -0.5))),   hole_id = c(1, 1, 1, 1, 1, 2, 2, 2) ) poly == poly2 #> [1] TRUE  # Equality of polygons doesn't care about where on the ring the vertices start poly <- polygon(points) poly2 <- polygon(points[c(2:5, 1)]) poly == poly2 #> [1] TRUE  # It cares about orientation though poly == reverse_orientation(poly) #> [1] FALSE  # This have implications for unqiue and duplicated polys <- c(poly, poly2, reverse_orientation(poly)) unique(polys) #> <2D polyclid_polygons [2]> #> [1] [Boundary: 5, Range: <<-1, -1>, <1, 1>>, Holes: 0] #> [2] [Boundary: 5, Range: <<-1, -1>, <1, 1>>, Holes: 0] duplicated(polys) #> [1] FALSE  TRUE FALSE"},{"path":"https://polyclid.r-euclid.com/reference/polygon_rings.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon rings — polygon_rings","title":"Polygon rings — polygon_rings","text":"polygon consists 1 rings. first ring denotes outer boundary polygon whereas additional rings marks holes within boundary. outer boundary empty (.e. consist vertices) polygon said unbounded. different rings can extracted, modified, , case holes, added removed. special function, connect_holes() exist remove holes connecting outer boundary, tracing upwards top vertex hole boundary reached. Connecting holes make polygon invalid part connecting hole boundary consist two overlapping edges.","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon_rings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygon rings — polygon_rings","text":"","code":"n_holes(x)  is_unbounded(x)  boundary(x)  boundary(x) <- value  hole(x, which)  hole(x, which = NULL) <- value  connect_holes(x)"},{"path":"https://polyclid.r-euclid.com/reference/polygon_rings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polygon rings — polygon_rings","text":"x, value polyclid_polygon vector integer vector recycled length x referencing hole get set","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon_rings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polygon rings — polygon_rings","text":"new polyclid_polygon vector , case n_holes() integer vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon_rings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polygon rings — polygon_rings","text":"","code":"poly <- polygon(   c(0, 10, 10, 0, 1, 5, 1),   c(0, 0, 10, 10, 1, 1, 5),   hole_id = c(1, 1, 1, 1, 2, 2, 2) ) plot(poly, col = \"grey\")   n_holes(poly) #> [1] 1  plot(boundary(poly), col = \"grey\")  plot(hole(poly, 1), col = \"grey\")   # Change the boundary boundary(poly) <- euclid::circle(point(5, 5), 40) plot(poly, col = \"grey\")   # Add a hole hole(poly) <- euclid::circle(point(7, 7), 9) plot(poly, col = \"grey\")   # Change a hole (by using a combination of hole and def setters) def(hole(poly, 1), \"x\") <- def(hole(poly, 1), \"x\") + 2 plot(poly, col = \"grey\")   # Or remove it hole(poly, 1) <- NULL plot(poly, col = \"grey\")   # Holes can also be removed by connecting them to the boundary poly <- connect_holes(poly) plot(poly, col = \"grey\", force_valid = FALSE)"},{"path":"https://polyclid.r-euclid.com/reference/polygon_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets of polygons — polygon_set","title":"Sets of polygons — polygon_set","text":"polygon set collections disjoint polygons holes. main use intermediary representations boolean operations operations may result one polygon. polygon set always valid polygons used construction validated beforehand. important note polygon set created two polygons may topologically different polygons merged touch overlap (effectively taking union ).","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets of polygons — polygon_set","text":"","code":"polygon_set(polygons)  is_polygon_set(x)  as_polygon_set(x, ...)  n_polygons(x)  locate_polygon(x, location)  n_faces(x)  vert_degree(x)  vert_neighbors(x)  polyline_verts(x)"},{"path":"https://polyclid.r-euclid.com/reference/polygon_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets of polygons — polygon_set","text":"polygons polyclid_polygon vector list . latter case union polygons vector used set. x polyclid_polygon_set vector ... Arguments passed location euclid_point2 vector giving locations","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets of polygons — polygon_set","text":"polyclid_polygon_set vector","code":""},{"path":[]},{"path":"https://polyclid.r-euclid.com/reference/polygon_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets of polygons — polygon_set","text":"","code":"# Polygon sets are created from polygons rects <- as_polygon(euclid::iso_rect(   euclid::point(0:1, 0),   euclid::point(1:2, 1) )) circs <- as_polygon(euclid::circle(euclid::point(c(0, 2), 1), 0.3))  ps <- polygon_set(c(rects, circs)) plot(ps, col = \"grey\")   # If a list of polygons are provided, the polygons in each element are # combined into one polygon set ps <- polygon_set(list(rects, circs)) plot(ps, col = c(\"grey\", \"red\"))   # As can be seen, the two rects have been merged as they were touching at the # edge  # You can get the number of polygons contained in a set as well as convert it # back into polygons n_polygons(ps) #> [1] 1 2 as_polygon(ps) #> <2D polyclid_polygons [3]> #> [1] [Boundary: 6, Range: <<0, 0>, <2, 1>>, Holes: 0]                   #> [2] [Boundary: 100, Range: <<-0.548, 0.452>, <0.548, 1.55>>, Holes: 0] #> [3] [Boundary: 100, Range: <<1.45, 0.452>, <2.55, 1.55>>, Holes: 0]     # You can also extract a specific polygon from a set as_polygon(ps, which = 1) #> <2D polyclid_polygons [2]> #> [1] [Boundary: 6, Range: <<0, 0>, <2, 1>>, Holes: 0]                   #> [2] [Boundary: 100, Range: <<-0.548, 0.452>, <0.548, 1.55>>, Holes: 0]  # Alternatively by specifying a point to locate the polygon to get locate_polygon(ps, euclid::point(2, 1)) #> <2D polyclid_polygons [2]> #> [1] [Boundary: 6, Range: <<0, 0>, <2, 1>>, Holes: 0]                #> [2] [Boundary: 100, Range: <<1.45, 0.452>, <2.55, 1.55>>, Holes: 0]  # When using boolean operations on polygons (or polygon sets) the result is a # polygon set p_sym_dif <- symmetric_difference(rects, circs) plot(p_sym_dif, col = c(\"grey\", \"red\"))"},{"path":"https://polyclid.r-euclid.com/reference/polygon_topology.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon topology — polygon_topology","title":"Polygon topology — polygon_topology","text":"functions checks certain aspects polygons topology. operate outer boundary polygon thus ignores holes may . convex polygon one whose boundary exclusively turn direction traversed. simply polygon polygon intersections edges except end points neighboring edges). relatively simple polygon like simple polygon except allows shared end point non-neighboring edges, requirement remains orientable (must \"cross \" vertex). relatively simple polygon always simple. Relative simplicity one requirements rings valid polygon.","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon_topology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygon topology — polygon_topology","text":"","code":"is_convex(x)  is_simple(x)  is_relatively_simple(x)"},{"path":"https://polyclid.r-euclid.com/reference/polygon_topology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polygon topology — polygon_topology","text":"x polyclid_polygon vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon_topology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polygon topology — polygon_topology","text":"logical vector length x","code":""},{"path":"https://polyclid.r-euclid.com/reference/polygon_topology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polygon topology — polygon_topology","text":"","code":"square <- polygon(   c(0, 10, 10, 0),   c(0, 0, 10, 10) ) cross <- polygon(   c(0, 10, 10, 0),   c(0, 10, 0, 10) ) butterfly <- polygon(   c(0, 5, 10, 10, 5, 0),   c(0, 5, 0, 10, 5, 10) ) cross2 <- polygon(   c(0, 5, 10, 10, 5, 0),   c(0, 5, 10, 0, 5, 10) ) is_convex(square) #> [1] TRUE is_convex(cross) #> [1] FALSE is_convex(butterfly) #> [1] FALSE is_convex(cross2) #> [1] FALSE  is_simple(square) #> [1] TRUE is_simple(cross) #> [1] FALSE is_simple(butterfly) #> [1] FALSE is_simple(cross2) #> [1] FALSE  is_relatively_simple(square) #> [1] TRUE is_relatively_simple(cross) #> [1] FALSE is_relatively_simple(butterfly) #> [1] TRUE is_relatively_simple(cross2) #> [1] TRUE"},{"path":"https://polyclid.r-euclid.com/reference/polyline.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of polylines — polyline","title":"Vector of polylines — polyline","text":"polyline set points defining trajectory path.","code":""},{"path":"https://polyclid.r-euclid.com/reference/polyline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of polylines — polyline","text":"","code":"polyline(..., id = NULL)  is_polyline(x)  as_polyline(x, ...)"},{"path":"https://polyclid.r-euclid.com/reference/polyline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector of polylines — polyline","text":"... Various input construction. See Constructors sections id integer vector length points, dividing points separate polylines (used points point vector) x polyclid_polyline vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/polyline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector of polylines — polyline","text":"polyclid_polyline vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/polyline.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Vector of polylines — polyline","text":"Providing 2D points vector id construct single polyline Providing 2D points vector id vector create vector polylines Instead 2D point vector can provide x y coordinates points directly. Providing list 2D point vectors construct vector polylines","code":""},{"path":[]},{"path":"https://polyclid.r-euclid.com/reference/polyline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector of polylines — polyline","text":"","code":"sine <- polyline(   seq(0, 2*pi, length.out = 20),   sin(seq(0, 2*pi, length.out = 20)) ) loop <- polyline(   c(0, 5, 6, 5, 0),   c(-1, 1, 0, -1, 1) ) polylines <- c(sine, loop) plot(polylines, lty = c(1, 2))   is_selfintersecting(polylines) #> [1] FALSE  TRUE  # Polylines can also be reversed so they are traversed in the opposite # direction reverse_orientation(polylines) #> <2D polyclid_polylines [2]> #> [1] [Path: 20, Range: <<0, -0.997>, <6.28, 0.997>>] #> [2] [Path: 5, Range: <<0, -1>, <6, 1>>]"},{"path":"https://polyclid.r-euclid.com/reference/polyline_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets of polylines — polyline_set","title":"Sets of polylines — polyline_set","text":"polyline set collections interior disjoint x-monotone polylines. polygon_set used containers result boolean operations polylines. made disjoint polylines overlapping polylines cut intersection. requirement x-monotonicity also means polyline may split several even (self)intersect. polyline sets may give rise polygons closed interior. faces set can extracted polygons using as_polygon(). , polyline set can thought graph structure end vertices polylines nodes, polylines edges. number connections node can extracted vert_degree() neighbors vert_neighbors(). vertices polyline associated can obtained polyline_verts().","code":""},{"path":"https://polyclid.r-euclid.com/reference/polyline_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets of polylines — polyline_set","text":"","code":"polyline_set(polylines)  is_polyline_set(x)  as_polyline_set(x, ...)  n_polylines(x, simplify = FALSE)"},{"path":"https://polyclid.r-euclid.com/reference/polyline_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets of polylines — polyline_set","text":"polylines polyclid_polygon vector list . latter case union polygons vector used set. x polyclid_polyline_set vector ... Arguments passed simplify extracted polylines simplified joining lines possible","code":""},{"path":"https://polyclid.r-euclid.com/reference/polyline_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets of polylines — polyline_set","text":"polyclid_polygon_set vector","code":""},{"path":[]},{"path":"https://polyclid.r-euclid.com/reference/polyline_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets of polylines — polyline_set","text":"","code":"sine <- polyline(   seq(0, 2*pi, length.out = 20),   sin(seq(0, 2*pi, length.out = 20)) ) loop <- polyline(   c(0, 5, 6, 5, 0),   c(-1, 1, 0, -1, 1) ) ps <- polyline_set(c(sine, loop))  # Vertices are only defined for end points - not points interior to the # polylines euclid_plot(vert(ps)) #> Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet  # You can get back the polylines as they are represented or simplified by # joining lines that meet at vertices with a degree of 2 plot(   as_polyline(ps[2]),   col = c(\"black\", \"red\", \"green\", \"blue\") ) plot(   as_polyline(ps[2], simplify = TRUE),   col = c(\"black\", \"red\", \"green\", \"blue\") )  # If a polyline_set defines a closed area, that can be extracted as a polygon n_faces(ps) #> [1] 0 1 as_polygon(ps) #> <2D polyclid_polygons [1]> #> [1] [Boundary: 4, Range: <<2.5, -1>, <6, 1>>, Holes: 0]  # A polyline set can be seen as a graph and the relevant info can be obtained vert_degree(ps[2]) #> [1] 1 2 4 1 vert_neighbors(ps[2]) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 3 3 #>  #> [[3]] #> [1] 2 2 1 4 #>  #> [[4]] #> [1] 3 #>  polyline_verts(ps[2]) #> [[1]] #> [1] 3 1 #>  #> [[2]] #> [1] 3 2 #>  #> [[3]] #> [1] 4 3 #>  #> [[4]] #> [1] 2 3 #>"},{"path":"https://polyclid.r-euclid.com/reference/reverse_orientation.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon orientation — reverse_orientation","title":"Polygon orientation — reverse_orientation","text":"Polygon rings can two different orientations: clockwise counterclockwise. clockwise oriented polygon polygon lies right traverse boundary order, reverse true counterclockwise oriented polygon. orientations basically valide representations polygon many algorithms assumes certain orientation boundary holes order work. outer boundary must counterclockwise holes must clockwise. ensure polygon always lies left traverse borders polygon. reverse_orientation() reverses orientation outer boundary holes. is_clockwise() is_counterclockwise() reports orientation outer boundary. get orientation hole, first extract hole().","code":""},{"path":"https://polyclid.r-euclid.com/reference/reverse_orientation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygon orientation — reverse_orientation","text":"","code":"reverse_orientation(x)  is_clockwise(x)  is_counterclockwise(x)"},{"path":"https://polyclid.r-euclid.com/reference/reverse_orientation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polygon orientation — reverse_orientation","text":"x polyclid_polygon vector","code":""},{"path":"https://polyclid.r-euclid.com/reference/reverse_orientation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polygon orientation — reverse_orientation","text":"new polyclid_polygon vector reverse_orientation() logical vector is_clockwise() is_conterclockwise()","code":""},{"path":"https://polyclid.r-euclid.com/reference/reverse_orientation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polygon orientation — reverse_orientation","text":"","code":"poly <- polygon(   c(0, 10, 10, 0),   c(10, 10, 0, 0) )  is_clockwise(poly) #> [1] TRUE poly <- reverse_orientation(poly) is_counterclockwise(poly) #> [1] TRUE"}]
