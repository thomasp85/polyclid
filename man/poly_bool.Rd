% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/poly_boolean.R
\name{poly_bool}
\alias{poly_bool}
\title{Boolean set operations on polygons and polylines}
\description{
polyclid extents the set of boolean set operations from euclid to work with
polylines and polygons or sets of these. As boolean operations has the
capacity to produce multiple polygons or poylines from a single one, the
output from boolean operations will always be a \link{polygon_set} or
\link{polyline_set} even if the input are \link{polygon} or \link{polyline} vectors. In
fact the polygon and polyline versions of these operations are simple
wrappers that converts their input to their respective set versions first.
}
\section{Operations between polygons}{
When set operations are performed between polygons and/or polygon sets (or
euclid geometries that can be considered polygons: circles, triangles and iso
rectangles), the output is always a \link{polygon_set}, even if the result is a
single polygon. This is done both to ensure a known output type, but also
because polygon sets are the internal representation used during boolean
operations and returning the native representation is thus more performant.
\itemize{
\item \code{union()} will combine two polygons into one (if they touch or overlaps) or
insert them into the same set if they are disjoint.
\item \code{intersection()} will return the area where the two inputs are interior
joint (overlapping).
\item \code{difference()} will remove the overlapping areas from the polygon(s) first
given in the first argument.
\item \code{symmetric_difference()} will return the areas of the inputs that are not
overlapping.
\item \code{complement()} returns the inverse of the input, i.e. the areas that were
outside of the input polygon(s) will be inside the returned polygon.
}

If only one argument is given, the cumulative operation is performed on the
input. For \code{union()} and \code{intersection()} this can be done in a single
aggregate operation whereas for \code{difference()} and \code{symmetric_difference()}
are done one at a time.
}

\section{Operations between polylines}{
Boolean set operations between polylines and/or polyline sets (or segments)
will always return polyline sets. These sets can be a mix of polylines and
isolated vertices depending on the input.
\itemize{
\item \code{union()} will combine the polylines into a single set. Lines that are
meeting at their end points will not be merged, but can be extracted with
\code{as_polyline(..., simplify = TRUE)}. The reason for this is that merging
these lines eagerly is bad for performance and will not alter the topology
of the set. Further, the set already splits polylines into x monotone parts
so there is not a 1-to-1 relationship between polylines and polyline sets
either way.
\item \code{intersection()} will return the points where the inputs are crossing along
with the line segments where they are overlapping.
\item \code{difference()} will insert vertices in the first polyline (set) where the
inputs are crossing and remove line segments that overlap.
\item \code{symmetric_difference()} will return those parts from either input that do
not overlap
}

contrary to polygons, there is not a single argument version for polylines,
mainly because the need is not really there.
}

\section{Operations between polylines and polygons}{
When doing operations between polygons and polylines the interpretation of
what should happen is unclear. The following definitions are therefore mainly
what makes sense in the context of this package. The return value is always a
polyline set, but depending on the operation, it may be the faces of this set
that has interpretational relevance.
\itemize{
\item \code{union()} will combine the polylines and polygons into a single set. Where
they overlap the polyline interior to the polygon will be removed as it's
point set is covered by that of the polygon
\item \code{intersection()} will return the polyline part that lies inside the polygon
as that represent the shared point set.
\item \code{difference()} if the polyline (set) is the first argument then the parts
overlapping the polygon will be removed. If the polygon (set) is the first
argument the polygon(s) will be cut by the into two or more by the
polyline(s).
\item \code{symmetric_difference()} will return the polylines and polygons overlayed
into a single polygon set. For many this is what they assume the union to
be.
}
}

