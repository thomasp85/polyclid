% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polyline_connect.R
\name{connect_polylines}
\alias{connect_polylines}
\title{Connect polylines together to a single line}
\usage{
connect_polylines(x, na.rm = TRUE)
}
\arguments{
\item{x}{A \code{polyclid_polyline} vector or a list of these}

\item{na.rm}{Should \code{NA} values be removed when connecting. If \code{FALSE} and
the input contains \code{NA}, the result will be \code{NA}.}
}
\value{
A \code{polyclid_polyline} vector
}
\description{
Taking the \code{union()} of polylines doesn't connect them together, but places
them in the same arrangement (it might even break them up depending on their
monotonicity). \code{connect_polylines()} does exactly what it advertises. it
takes a vector of polylines (or a list of polyline vectors) and combines them
into a single polyline by connecting the endpoint of each polyline with the
start point of the next. If the end and the start are equal the duplicate
vertex will be removed.
}
\examples{
sine <- polyline(
  seq(0, 2*pi, length.out = 20),
  sin(seq(0, 2*pi, length.out = 20))
)
loop <- polyline(
  c(0, 5, 6, 5, 0),
  c(-1, 1, 0, -1, 1)
)
pl <- c(sine, loop)

plot(connect_polylines(pl))

sine1 <- sine[1:10]
sine2 <- sine[10:20]

sine == connect_polylines(c(sine1, sine2))
}
